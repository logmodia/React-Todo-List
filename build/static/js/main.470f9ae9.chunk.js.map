{"version":3,"sources":["components/Form.js","components/Todo.js","components/TodoList.js","App.js","index.js"],"names":["MySwal","withReactContent","Swal","Form","todos","inputRef","useRef","newTodos","JSON","parse","stringify","todosArray","className","ref","type","placeholder","onClick","inputVal","current","value","setTodos","id","uuidv4","name","complete","fire","Todo","todoElements","checked","completed","onChange","find","todo","title","icon","footer","showCancelButton","showConfirmButton","confirmButtonText","then","result","isConfirmed","updatedTodos","filter","val","style_hideGroup_initial","visibility","position","left","style_hideGroup","btnTxt","TodoList","useState","display","setDisplay","uncompleted","testState","map","el","push","countUncompleted","countCompleted","length","filtered","style","LOCAL_STORAGE_KEY","App","useEffect","storedTodos","localStorage","getItem","window","setItem","LSKey","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.470f9ae9.chunk.js","sourcesContent":["import React, {useRef} from 'react'\r\nimport uuidv4 from 'uuid/dist/v4';\r\n\r\nimport Swal from 'sweetalert2'\r\nimport withReactContent from 'sweetalert2-react-content'\r\n\r\nconst MySwal = withReactContent(Swal)\r\n\r\nexport default function Form(todos) {\r\n\r\n    const inputRef = useRef()\r\n    const newTodos = JSON.parse(JSON.stringify(todos.todosArray))\r\n\r\n  //Add a new todo ------------------------------------------------\r\n    const addTodoHandler = ()=>{\r\n      \r\n      let inputVal = inputRef.current;\r\n\r\n      if (inputVal.value !==\"\"){\r\n        //newTodos.push(inputVal.value)\r\n        todos.setTodos([...newTodos,{id : uuidv4(), name : inputVal.value, complete : false}])\r\n      }else{\r\n          MySwal.fire('Empty field','Please, type your todo\\'s name.','warning')\r\n        }\r\n        \r\n    }\r\n    \r\n    return (\r\n        <form className=\"form\">\r\n          <input ref={inputRef} className=\"todoInput\" type=\"text\" placeholder = \"Type your new todo here\"/>\r\n\r\n          <div className = \"containerFormbuttons\">\r\n            <button className=\"btn\" type=\"button\" onClick={addTodoHandler}>Add todo</button>\r\n          </div>\r\n\r\n        </form>\r\n    )\r\n}\r\n","import Swal from 'sweetalert2'\r\nimport withReactContent from 'sweetalert2-react-content'\r\n\r\nconst MySwal = withReactContent(Swal)\r\n\r\nexport default function Todo(todoElements) {\r\n    \r\n\r\n    //Delete one todo-----------------------------------\r\n    const deleteHandler = ()=>{\r\n\r\n        MySwal.fire(\r\n            {\r\n                title : 'Do you really want to delete this todo',\r\n                icon : 'question',\r\n                footer : 'My Todo App',\r\n                showCancelButton : true,\r\n                showConfirmButton : true,\r\n                confirmButtonText : 'Yes, Delete'\r\n\r\n            }\r\n        ).then(result =>{\r\n            if (result.isConfirmed){\r\n                const updatedTodos = todoElements.newTodos.filter(\r\n                    (val)=> {\r\n                        return  val.id !== todoElements.id\r\n                    } ) \r\n\r\n                    todoElements.setTodos(updatedTodos)\r\n                    \r\n                    \r\n                }\r\n            })\r\n            \r\n            \r\n        }\r\n        \r\n\r\n    const checkboxHandler = ()=>{\r\n        todoElements.newTodos.find(todo => {\r\n            if (todo.id === todoElements.id){\r\n                todo.complete = !todo.complete\r\n                \r\n            }\r\n            return todoElements.setTodos(todoElements.newTodos)\r\n        })\r\n    }\r\n\r\n\r\n    return (\r\n        <div className = \"todoElement\">\r\n            <div>\r\n                <input type=\"checkbox\" checked = {todoElements.completed} onChange = {checkboxHandler}/>{todoElements.name}\r\n            </div>\r\n            <button type = \"button\" className = \"btn1\" onClick ={deleteHandler}>X</button>\r\n\r\n        </div>\r\n        \r\n    )\r\n}\r\n","import React, {useState} from 'react';\r\nimport Todo from './Todo';\r\n\r\nimport Swal from 'sweetalert2'\r\nimport withReactContent from 'sweetalert2-react-content'\r\n\r\nconst MySwal = withReactContent(Swal)\r\n\r\n\r\nconst style_hideGroup_initial = {visibility: \"hidden\", position : \"absolute\", left :0}\r\nlet style_hideGroup = {visibility: \"hidden\", position : \"absolute\", left :0}\r\nlet btnTxt= \"View completed\"\r\n\r\n\r\nexport default function TodoList(todos) {\r\n\r\n   const [display, setDisplay] = useState(false)\r\n   \r\n    const newTodos = JSON.parse(JSON.stringify(todos.todosArray))\r\n\r\n    let uncompleted=[];\r\n    let completed=[];\r\n\r\n    //Check the state to display or not the completed list\r\n    const testState = ()=>{\r\n        if (display === false){\r\n            style_hideGroup = {visibility: \"visible\", position : \"static\"}\r\n            btnTxt = \"Hide completed\"\r\n            setDisplay(true)\r\n            \r\n        }else{\r\n            style_hideGroup = {visibility: \"hidden\", position : \"absolute\", left : 0}\r\n            btnTxt = \"View completed\"\r\n            setDisplay(false)\r\n        }\r\n    }\r\n    \r\n    //Creating two todos list : completed and uncompleted\r\n    newTodos.map(\r\n        (el) => {\r\n        if (el.complete === false){ //uncomleted list\r\n            \r\n            uncompleted.push(<Todo key = {el.id} name = {el.name} id = {el.id} newTodos = {newTodos} \r\n            completed = {el.complete} setTodos = {todos.setTodos}/>)\r\n\r\n        }else{ //Comleted list\r\n\r\n            completed.push(<Todo key = {el.id} name = {el.name} id = {el.id} newTodos = {newTodos} \r\n                completed = {el.complete} setTodos = {todos.setTodos}/>)\r\n        }\r\n        }\r\n    )\r\n        \r\n    //On click viewCompleted button, hide or display completed todos list if there is at least one todo\r\n    const viewCompleted = ()=>{\r\n        if (completed.length !== 0) {\r\n            testState()\r\n        }else{\r\n            MySwal.fire('Empty list','There is no completed todo','info')\r\n        }\r\n    }\r\n\r\n        //Delete all completed todos-----------------------------------------\r\n        const deleteAllCompleted_handler = ()=>{\r\n\r\n            MySwal.fire({\r\n                title: <p>Do you really want to delete all completed todos</p>,\r\n                icon : 'question',\r\n                footer: 'My Todo App',\r\n                \r\n                showCancelButton : true,\r\n                showConfirmButton : true,\r\n                confirmButtonText : 'Yes, Delete',\r\n                \r\n              }).then((result) => {\r\n                  if (result.isConfirmed){\r\n                      const filtered = newTodos.filter(todo => !todo.complete)\r\n                      todos.setTodos(filtered)\r\n                      testState()\r\n                      return MySwal.fire(<p>Deleted successfully</p>)\r\n              \r\n                  }\r\n              })\r\n\r\n        }\r\n\r\n        let countUncompleted = newTodos.filter(todo => !todo.complete)\r\n        let countCompleted = newTodos.filter(todo => todo.complete)\r\n\r\n        if (countCompleted.length === 0) {\r\n            btnTxt = \"View completed\"\r\n            style_hideGroup=style_hideGroup_initial\r\n        }\r\n\r\n        return(\r\n            <>\r\n                <div className = \"topListBtn_Container\">\r\n                    <button className = \"btn2\" onClick = {viewCompleted}>{btnTxt}</button>\r\n                    <button className = \"btn2\" onClick = {deleteAllCompleted_handler} style = {style_hideGroup}>Delete all completed</button>\r\n                    <span className = \"label labelUncompleted\">{countUncompleted.length} todo(s) uncompleted</span>\r\n                    <span className = \"label labelCompleted\">{countCompleted.length} todo(s) completed</span>\r\n                </div>\r\n\r\n                <div className=\"ContainertodoGroups\">\r\n                    {\r\n                        uncompleted.length !== 0 ? <div className=\"todoGroup\">{uncompleted}</div> : <div className=\"todoGroup\" style = {style_hideGroup_initial}/>\r\n                    }\r\n                    {\r\n                        completed.length !== 0 ? <div className=\"todoGroup\" style = {style_hideGroup}>{completed}</div> : <div className=\"todoGroup\" style = {style_hideGroup}/>\r\n                    }\r\n                    \r\n                </div>\r\n            </>\r\n                \r\n        )\r\n    \r\n}\r\n","import React, {useState, useEffect} from 'react';\nimport './index.css';\nimport Form from './components/Form';\nimport TodoList from './components/TodoList';\n\nconst LOCAL_STORAGE_KEY = 'todoApp.todo'\n\nfunction App() {\n\n  const initialTodoArray = []\n  const [todos,setTodos] = useState(initialTodoArray)\n\n  useEffect(() => {\n    const storedTodos = JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEY))\n    if (storedTodos) setTodos(storedTodos)\n  },[])\n\n  useEffect(() => {\n    window.localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(todos))\n  },[todos])\n\n  return (\n    <>\n      <header className = \"header\">\n            <h1 className = \"headerTitle\">My Todo App</h1>\n      </header>\n\n      <div className = \"main\">\n        <Form todosArray = {todos} setTodos = {setTodos} LSKey = {LOCAL_STORAGE_KEY}/>\n  \n        <TodoList todosArray = {todos} setTodos = {setTodos}/>\n      </div>\n\n      <footer className = \"footer\">\n            <h5 className = \"headerTitle\">My Todo App | ©copyright 2021 | by René Logala Modia</h5>\n      </footer>\n    </>\n  )\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}